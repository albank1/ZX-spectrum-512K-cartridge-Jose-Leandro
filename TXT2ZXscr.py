import sys
import struct
import numpy as np
from PIL import Image, ImageDraw

# ZX Spectrum screen memory layout constants
SCREEN_WIDTH = 256
SCREEN_HEIGHT = 192
BYTES_PER_ROW = SCREEN_WIDTH // 8
SCREEN_MEMORY_SIZE = 6144
ATTRIBUTE_MEMORY_SIZE = 768
TOTAL_SIZE = SCREEN_MEMORY_SIZE + ATTRIBUTE_MEMORY_SIZE

# ZX Spectrum colors
BLACK = 0x00  # Black background
WHITE = 0x47  # White foreground
RED = 0x42    # Red foreground

# ZX Spectrum 8x8 font (full ASCII uppercase and lowercase letters)
ZX_FONT = {
    'A': [0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    'B': [0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00],
    'C': [0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00],
    'D': [0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00],
    'E': [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00],
    'F': [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00],
    'G': [0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3E, 0x00],
    'H': [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    'I': [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
    'J': [0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x3C, 0x00],
    'K': [0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00],
    'L': [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00],
    'M': [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
    'N': [0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00],
    'O': [0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'P': [0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00],
    'Q': [0x3C, 0x66, 0x66, 0x66, 0x6E, 0x6C, 0x3A, 0x00],
    'R': [0x7C, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x00],
    'S': [0x3E, 0x60, 0x60, 0x3C, 0x06, 0x06, 0x7C, 0x00],
    'T': [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],
    'U': [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'V': [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
    'W': [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
    'X': [0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00],
    'Y': [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00],
    'Z': [0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00],
    'a': [0x00, 0x3C, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00],
    'b': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00],
    'c': [0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x00],
    'd': [0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00],
    'e': [0x00, 0x3C, 0x66, 0x7E, 0x60, 0x66, 0x3C, 0x00],
    'f': [0x00, 0x3E, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00],
    'g': [0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C, 0x00],
    'h': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00],
    'i': [0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00],
    'j': [0x00, 0x06, 0x00, 0x06, 0x06, 0x66, 0x3C, 0x00],
    'k': [0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00],
    'l': [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
    'm': [0x00, 0x6C, 0x7E, 0x7E, 0x6A, 0x62, 0x62, 0x00],
    'n': [0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00],
    'o': [0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'p': [0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00],
    'q': [0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x00],
    'r': [0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x60, 0x00],
    's': [0x00, 0x3E, 0x60, 0x3C, 0x06, 0x06, 0x7C, 0x00],
    't': [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0E, 0x00],
    'u': [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00],
    'v': [0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
    'w': [0x00, 0x62, 0x6A, 0x7E, 0x7E, 0x36, 0x36, 0x00],
    'x': [0x00, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x66, 0x00],
    'y': [0x00, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x7C, 0x00],
    'z': [0x00, 0x7E, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00],
    '-': [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00],
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]}

# Background is now set to black in the attribute memory
ATTR_MEMORY = [BLACK] * ATTRIBUTE_MEMORY_SIZE

def draw_character(char, x, y, screen_data):
    """Draw an 8x8 character onto the screen buffer."""
    if char in ZX_FONT:
        for row in range(8):
            screen_data[y + row, x // 8] = ZX_FONT[char][row]

def text_to_scr(text, output_file):
    """Convert text to a ZX Spectrum SCR file."""
    
    # Create an empty screen buffer
    screen_data = np.zeros((192, 32), dtype=np.uint8)
    attribute_data = np.full((24, 32), BLACK+WHITE, dtype=np.uint8)  # Default attribute color from sample file
    attribute_data [0,0:31] = BLACK+RED
    # Draw text using the ZX Spectrum font
    x, y = 0, 0
    for char in text:
        if char == '\n':
            x = 0
            y += 8
            if y >= SCREEN_HEIGHT:
                break
        elif char in ZX_FONT:
            draw_character(char, x, y, screen_data)
            x += 8
            if x >= SCREEN_WIDTH:
                x = 0
                y += 8
                if y >= SCREEN_HEIGHT:
                    break
    
    # Create a .SCR file
    with open(output_file, "wb") as f:
        # Write screen memory in ZX Spectrum interleaved format
        for block_y in range(3):  # 3 blocks of 64 rows each
            for row_offset in range(8):  # Each block has 8 interleaved rows
                for section_y in range(8):  # 8 sections in a block
                    y = block_y * 64 + section_y * 8 + row_offset
                    f.write(screen_data[y, :].tobytes())
        
        # Write attributes
        f.write(attribute_data.tobytes())
    
    print(f"SCR file saved as {output_file}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python txt_to_scr.py input.txt output.scr")
        sys.exit(1)
    
    # Read text file
    with open(sys.argv[1], "r", encoding="utf-8") as file:
        text_content = file.read()
    
    text_to_scr(text_content, sys.argv[2])
